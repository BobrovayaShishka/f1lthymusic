from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from music_generator import generate_music
from config import BOT_TOKEN
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞–¥–µ–∂–µ–π
MOOD_NOMINATIVE = {
    "sad": "–ì—Ä—É—Å—Ç–Ω–∞—è",
    "calm": "–°–ø–æ–∫–æ–π–Ω–∞—è",
    "happy": "–†–∞–¥–æ—Å—Ç–Ω–∞—è",
    "energetic": "–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è"
}

MOOD_GENITIVE = {
    "sad": "–≥—Ä—É—Å—Ç–Ω–æ–π",
    "calm": "—Å–ø–æ–∫–æ–π–Ω–æ–π",
    "happy": "—Ä–∞–¥–æ—Å—Ç–Ω–æ–π",
    "energetic": "—ç–Ω–µ—Ä–≥–∏—á–Ω–æ–π"
}

MOOD_KEYBOARD = [
    [InlineKeyboardButton("üò¢ –ì—Ä—É—Å—Ç–Ω–æ–µ", callback_data="sad")],
    [InlineKeyboardButton("üòå –°–ø–æ–∫–æ–π–Ω–æ–µ", callback_data="calm")],
    [InlineKeyboardButton("üòÑ –†–∞–¥–æ—Å—Ç–Ω–æ–µ", callback_data="happy")],
    [InlineKeyboardButton("‚ö° –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ", callback_data="energetic")]
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
GENERATE_AGAIN_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="generate_another")]
])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üéπ *–ü—Ä–∏–≤–µ—Ç, —è f1lthy!*\n\n"
        "–Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä. –° –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —è —Å–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ–ª–æ–¥–∏–∏, "
        "–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–±–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.\n\n"
        "‚ú® –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –±—É–¥—É—â–µ–π –º–µ–ª–æ–¥–∏–∏:"
    )

    await update.message.reply_text(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(MOOD_KEYBOARD)
    )

async def handle_mood(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    mood = query.data

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–¥–µ–∂–∞—Ö
    mood_name_nom = MOOD_NOMINATIVE.get(mood, "–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è")
    mood_name_gen = MOOD_GENITIVE.get(mood, "–º—É–∑—ã–∫–∞–ª—å–Ω–æ–π")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º
    status_msg = await query.edit_message_text(f"üéπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {mood_name_gen} –º–µ–ª–æ–¥–∏–∏...")

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        audio_path, midi_path = generate_music(mood)

        if not midi_path:
            await status_msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É")
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        title = f"{mood_name_nom} –º–µ–ª–æ–¥–∏—è"
        caption = f"üéµ {mood_name_nom} –º–µ–ª–æ–¥–∏—è"

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –∫–Ω–æ–ø–∫–æ–π "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë"
        if audio_path and os.path.exists(audio_path):
            with open(audio_path, 'rb') as audio_file:
                await context.bot.send_audio(
                    chat_id=query.message.chat_id,
                    audio=audio_file,
                    title=title,
                    caption=caption,
                    reply_markup=GENERATE_AGAIN_KEYBOARD
                )
        else:
            # –ï—Å–ª–∏ –∞—É–¥–∏–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º MIDI —Å –∫–Ω–æ–ø–∫–æ–π "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë"
            with open(midi_path, 'rb') as midi_file:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=midi_file,
                    filename=f"{mood_name_nom}_–º–µ–ª–æ–¥–∏—è.mid",
                    caption=caption,
                    reply_markup=GENERATE_AGAIN_KEYBOARD
                )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await status_msg.edit_text(f"‚úÖ {mood_name_nom} –º–µ–ª–æ–¥–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await status_msg.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")


async def download_midi(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è MIDI"""
    query = update.callback_query
    await query.answer()
    midi_path = query.data[3:]

    if os.path.exists(midi_path):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        mood = os.path.basename(midi_path).split("_")[0]
        mood_name_nom = MOOD_NOMINATIVE.get(mood, "–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è")

        with open(midi_path, 'rb') as midi_file:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=midi_file,
                filename=f"{mood_name_nom}_–º–µ–ª–æ–¥–∏—è.mid",
                caption=f"üéµ MIDI-—Ñ–∞–π–ª: {mood_name_nom} –º–µ–ª–æ–¥–∏—è"
            )
    else:
        await query.message.reply_text("‚ö†Ô∏è –§–∞–π–ª MIDI –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def generate_another(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë'"""
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
    await query.edit_message_reply_markup(reply_markup=None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    await query.message.reply_text(
        "üéµ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º—É–∑—ã–∫–∏:",
        reply_markup=InlineKeyboardMarkup(MOOD_KEYBOARD)
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = query.message
    else:
        message = update.message

    help_text = (
        "üéº *–ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è —Å f1lthy?*\n\n"
        "1. –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è –º–µ–ª–æ–¥–∏–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
        "2. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ–∑–¥–∞—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é\n"
        "3. –ü—Ä–æ—Å–ª—É—à–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–∞—á–∞–π MIDI-—Ñ–∞–π–ª\n"
        "4. –•–æ—á–µ—à—å –¥—Ä—É–≥—É—é –º–µ–ª–æ–¥–∏—é? –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë'!\n\n"
        "üí° *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π PyTorch\n"
        "- –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑ SoundFont\n\n"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üéπ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="start_generation")]
    ])

    if update.callback_query:
        await query.edit_message_text(
            help_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        await message.reply_text(
            help_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"
async def start_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    await query.edit_message_text(
        "üéµ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º—É–∑—ã–∫–∏:",
        reply_markup=InlineKeyboardMarkup(MOOD_KEYBOARD)
    )


def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_mood, pattern="^(sad|calm|happy|energetic)$"))
    application.add_handler(CallbackQueryHandler(download_midi, pattern="^dl_"))
    application.add_handler(CallbackQueryHandler(generate_another, pattern="^generate_another$"))
    application.add_handler(CallbackQueryHandler(start_generation, pattern="^start_generation$"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    application.run_polling()


if __name__ == "__main__":
    main()  
